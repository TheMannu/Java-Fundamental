Questrion 02.
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown
pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k],
nums[k+l],...,nums[n-l], nums[0], nums[l],..., nums[k-l]] (0-indexed). For example 
[0,1,2,3,4,5,6,7] might be rotated pivot index 3 and pivot at become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return 
the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Answer..
package Arrays;
public class Question02 {
    public static int search(int nums[], int target) {
        //min will have index of minimum element of nums
        int min = minSearch(nums);
        //find in sorted left
        if(nums[min] <= target && target <= nums[nums.length-1]) {
            return search(nums,min,nums.length-1,target);
        }
        //find in sorted right
        else{
            return search(nums,0,min, target);
        }
    }
    public static int search(int nums[], int left, int right, int target) {
        int l = left;
        int r = right;
        //System.out.println(left+" "+right);
        while (left <= right) {
            int mid = l + (r - l) / 2;
            if(nums[mid] == target) {
                return mid;
            } else if (nums[mid] > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return -1;
    }
    public static int minSearch(int nums[]) {
        int left = 0;
        int right = nums.length - 1;

        while(left < right) {
            int mid = left +(right - left) / 2;
            if(mid > 0 && nums[mid -1] > nums[mid]) {
                return mid;
            } else if (nums[left] <= nums[mid] && nums[mid] > nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
    public static void main(String[] args) {
        int nums[] = {4,5,6,7,0,1,2};
        int nums02[] = {4,5,6,7,0,1,2};
        int nums03[] = {1};
        System.out.println(search(nums, 0));
        System.out.println(search(nums02, 6));
        System.out.println(search(nums03, 0));
    }
}
